// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: IUX_substructs.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IUX {

  /// <summary>Holder for reflection information generated from IUX_substructs.proto</summary>
  public static partial class IUXSubstructsReflection {

    #region Descriptor
    /// <summary>File descriptor for IUX_substructs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IUXSubstructsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRJVVhfc3Vic3RydWN0cy5wcm90bxIDSVVYIsoBCg1GbGlnaHRQcm9maWxl",
            "EhMKC2hhbmRfbGF1bmNoGAEgASgIEg4KBmd1aWRlZBgCIAEoCBIQCgh5YXdf",
            "bG9jaxgDIAEoCBISCgpwaXRjaF9sb2NrGAQgASgIEiYKDGJsb2NrX2NvbmZp",
            "ZxgFIAEoDjIQLklVWC5CbG9ja0NvbmZpZxIVCghhbHRfaG9sZBgGIAEoAkgA",
            "iAEBEhUKCHBfZmFjdG9yGAcgASgCSAGIAQFCCwoJX2FsdF9ob2xkQgsKCV9w",
            "X2ZhY3RvciIpCgZQb2ludDMSCQoBeBgBIAEoARIJCgF5GAIgASgBEgkKAXoY",
            "AyABKAEiQgoJTGF0TG9uQWx0EhAKCGxhdGl0dWRlGAEgASgBEhEKCWxvbmdp",
            "dHVkZRgCIAEoARIQCghhbHRpdHVkZRgDIAEoAiJECgZBekVsVDISDwoHYXpp",
            "bXV0aBgBIAEoAhIRCgllbGV2YXRpb24YAiABKAISFgoOaW50ZXJjZXB0X3Rp",
            "bWUYAyABKAIilwEKCExvY2F0aW9uEiUKC2xhdF9sb25fYWx0GAEgASgLMg4u",
            "SVVYLkxhdExvbkFsdEgAEhsKBEVDRUYYAiABKAsyCy5JVVguUG9pbnQzSAAS",
            "GgoDRU5VGAMgASgLMgsuSVVYLlBvaW50M0gAEh0KBkF6RWxUMhgEIAEoCzIL",
            "LklVWC5BekVsVDJIAEIMCgpjb29yZF90eXBlIjQKCEF0dGl0dWRlEgsKA3lh",
            "dxgBIAEoAhINCgVwaXRjaBgCIAEoAhIMCgRyb2xsGAMgASgCKoIBCgtCbG9j",
            "a0NvbmZpZxILCgdOT0JMT0NLEAASDAoHQkxPQ0swQRCKAhIMCgdCTE9DSzBC",
            "EIsCEgwKB0JMT0NLMEMQjAISDwoKQkxPQ0swRF9WMRCNAhIPCgpCTE9DSzBF",
            "X1Y0EI4IEgwKB0JMT0NLMUEQmgISDAoHQkxPQ0sxQhCbAiqbAgoKU3RhdHVz",
            "Q29kZRIMCghOT1NUQVRVUxAAEggKBElETEUQARIJCgVTTEVFUBACEg0KCUNP",
            "Tk5FQ1RFRBADEgkKBVJFQURZEAQSCQoFQVJNRUQQBRIMCghMQVVOQ0hFRBAG",
            "Eg8KC0JPT1NUX1BIQVNFEAcSEQoNUFJJTUFSWV9TVEFHRRAIEg8KC0dMSURF",
            "X1NUQUdFEAkSDgoKVEVSTUlOQVRFRBAKEgkKBUVSQVNFEAsSEQoNU0VMRl9E",
            "RVNUUlVDVBAMEgcKA0VORBANEgwKCENPT0xET1dOEA4SEgoOTEFVTkNIX1NU",
            "QU5EQlkQDxIQCgxESVNDT05ORUNURUQQEBIJCgVFUlJPUhAREgwKCERFUExP",
            "WUVEEBIqIgoLVGFyZ2V0Q2xhc3MSEwoPTk9fVEFSR0VUX0NMQVNTEABCKgoQ",
            "Y29tLmFpcnNoYXJlLml1eEIOSVVYX3N1YnN0cnVjdHNIAaICA0lVWGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::IUX.BlockConfig), typeof(global::IUX.StatusCode), typeof(global::IUX.TargetClass), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IUX.FlightProfile), global::IUX.FlightProfile.Parser, new[]{ "HandLaunch", "Guided", "YawLock", "PitchLock", "BlockConfig", "AltHold", "PFactor" }, new[]{ "AltHold", "PFactor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IUX.Point3), global::IUX.Point3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IUX.LatLonAlt), global::IUX.LatLonAlt.Parser, new[]{ "Latitude", "Longitude", "Altitude" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IUX.AzElT2), global::IUX.AzElT2.Parser, new[]{ "Azimuth", "Elevation", "InterceptTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IUX.Location), global::IUX.Location.Parser, new[]{ "LatLonAlt", "ECEF", "ENU", "AzElT2" }, new[]{ "CoordType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IUX.Attitude), global::IUX.Attitude.Parser, new[]{ "Yaw", "Pitch", "Roll" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// The Block configuration Enumerator.  
  /// Provides a list of the block configs in the AirShare System, and easy-to-read Aliases.
  /// </summary>
  public enum BlockConfig {
    /// <summary>
    /// Null block config (Used for testing, invalid block, or unspecified block).
    /// </summary>
    [pbr::OriginalName("NOBLOCK")] Noblock = 0,
    /// <summary>
    /// Guided 50mm Missile
    /// </summary>
    [pbr::OriginalName("BLOCK0A")] Block0A = 266,
    /// <summary>
    /// Guided 50mm Missile with booster
    /// </summary>
    [pbr::OriginalName("BLOCK0B")] Block0B = 267,
    /// <summary>
    /// Ballistic 50mm Missile
    /// </summary>
    [pbr::OriginalName("BLOCK0C")] Block0C = 268,
    /// <summary>
    /// Ballistic 40mm Missile, revision 1
    /// </summary>
    [pbr::OriginalName("BLOCK0D_V1")] Block0DV1 = 269,
    /// <summary>
    /// 40mm grenade launcher Missile, revision 4
    /// </summary>
    [pbr::OriginalName("BLOCK0E_V4")] Block0EV4 = 1038,
    /// <summary>
    /// Optical Seeker 60mm Missile
    /// </summary>
    [pbr::OriginalName("BLOCK1A")] Block1A = 282,
    /// <summary>
    /// Optical Seeker 60mm Missile with booster
    /// </summary>
    [pbr::OriginalName("BLOCK1B")] Block1B = 283,
  }

  /// <summary>
  ///*
  /// Status code Enumerator.  
  /// List of Status Codes to indicate the states and configuration of AirShare Systems.
  ///
  /// Status codes can have different meanings on different systems
  /// </summary>
  public enum StatusCode {
    /// <summary>
    /// Null status or status not determined
    /// </summary>
    [pbr::OriginalName("NOSTATUS")] Nostatus = 0,
    [pbr::OriginalName("IDLE")] Idle = 1,
    [pbr::OriginalName("SLEEP")] Sleep = 2,
    [pbr::OriginalName("CONNECTED")] Connected = 3,
    [pbr::OriginalName("READY")] Ready = 4,
    [pbr::OriginalName("ARMED")] Armed = 5,
    [pbr::OriginalName("LAUNCHED")] Launched = 6,
    [pbr::OriginalName("BOOST_PHASE")] BoostPhase = 7,
    [pbr::OriginalName("PRIMARY_STAGE")] PrimaryStage = 8,
    [pbr::OriginalName("GLIDE_STAGE")] GlideStage = 9,
    [pbr::OriginalName("TERMINATED")] Terminated = 10,
    [pbr::OriginalName("ERASE")] Erase = 11,
    [pbr::OriginalName("SELF_DESTRUCT")] SelfDestruct = 12,
    [pbr::OriginalName("END")] End = 13,
    [pbr::OriginalName("COOLDOWN")] Cooldown = 14,
    [pbr::OriginalName("LAUNCH_STANDBY")] LaunchStandby = 15,
    [pbr::OriginalName("DISCONNECTED")] Disconnected = 16,
    [pbr::OriginalName("ERROR")] Error = 17,
    [pbr::OriginalName("DEPLOYED")] Deployed = 18,
  }

  /// <summary>
  ///*
  /// Target class enumerator.  
  /// List of viable target classes. These include different types of drones and collection of targets.
  /// </summary>
  public enum TargetClass {
    [pbr::OriginalName("NO_TARGET_CLASS")] NoTargetClass = 0,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// Flight profile data structure.  
  /// This substruct carries the information needed for a missile to configure its flight profile before launching.
  /// </summary>
  public sealed partial class FlightProfile : pb::IMessage<FlightProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlightProfile> _parser = new pb::MessageParser<FlightProfile>(() => new FlightProfile());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlightProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IUX.IUXSubstructsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightProfile(FlightProfile other) : this() {
      _hasBits0 = other._hasBits0;
      handLaunch_ = other.handLaunch_;
      guided_ = other.guided_;
      yawLock_ = other.yawLock_;
      pitchLock_ = other.pitchLock_;
      blockConfig_ = other.blockConfig_;
      altHold_ = other.altHold_;
      pFactor_ = other.pFactor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightProfile Clone() {
      return new FlightProfile(this);
    }

    /// <summary>Field number for the "hand_launch" field.</summary>
    public const int HandLaunchFieldNumber = 1;
    private bool handLaunch_;
    /// <summary>
    /// Configure whether hand launch is enabled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HandLaunch {
      get { return handLaunch_; }
      set {
        handLaunch_ = value;
      }
    }

    /// <summary>Field number for the "guided" field.</summary>
    public const int GuidedFieldNumber = 2;
    private bool guided_;
    /// <summary>
    /// Configure if the missile uses guided flight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Guided {
      get { return guided_; }
      set {
        guided_ = value;
      }
    }

    /// <summary>Field number for the "yaw_lock" field.</summary>
    public const int YawLockFieldNumber = 3;
    private bool yawLock_;
    /// <summary>
    /// Lock the yaw control axis for the Missile 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool YawLock {
      get { return yawLock_; }
      set {
        yawLock_ = value;
      }
    }

    /// <summary>Field number for the "pitch_lock" field.</summary>
    public const int PitchLockFieldNumber = 4;
    private bool pitchLock_;
    /// <summary>
    /// Lock the pitch control axis for the Missile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PitchLock {
      get { return pitchLock_; }
      set {
        pitchLock_ = value;
      }
    }

    /// <summary>Field number for the "block_config" field.</summary>
    public const int BlockConfigFieldNumber = 5;
    private global::IUX.BlockConfig blockConfig_ = global::IUX.BlockConfig.Noblock;
    /// <summary>
    /// State the block configuration (effects flight plans and guidance, Currently unimplemented)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.BlockConfig BlockConfig {
      get { return blockConfig_; }
      set {
        blockConfig_ = value;
      }
    }

    /// <summary>Field number for the "alt_hold" field.</summary>
    public const int AltHoldFieldNumber = 6;
    private float altHold_;
    /// <summary>
    /// Altitude hold value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AltHold {
      get { if ((_hasBits0 & 1) != 0) { return altHold_; } else { return 0F; } }
      set {
        _hasBits0 |= 1;
        altHold_ = value;
      }
    }
    /// <summary>Gets whether the "alt_hold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAltHold {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "alt_hold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAltHold() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "p_factor" field.</summary>
    public const int PFactorFieldNumber = 7;
    private float pFactor_;
    /// <summary>
    /// The flight P factor (???)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PFactor {
      get { if ((_hasBits0 & 2) != 0) { return pFactor_; } else { return 0F; } }
      set {
        _hasBits0 |= 2;
        pFactor_ = value;
      }
    }
    /// <summary>Gets whether the "p_factor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPFactor {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "p_factor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPFactor() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlightProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlightProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HandLaunch != other.HandLaunch) return false;
      if (Guided != other.Guided) return false;
      if (YawLock != other.YawLock) return false;
      if (PitchLock != other.PitchLock) return false;
      if (BlockConfig != other.BlockConfig) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AltHold, other.AltHold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PFactor, other.PFactor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HandLaunch != false) hash ^= HandLaunch.GetHashCode();
      if (Guided != false) hash ^= Guided.GetHashCode();
      if (YawLock != false) hash ^= YawLock.GetHashCode();
      if (PitchLock != false) hash ^= PitchLock.GetHashCode();
      if (BlockConfig != global::IUX.BlockConfig.Noblock) hash ^= BlockConfig.GetHashCode();
      if (HasAltHold) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AltHold);
      if (HasPFactor) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PFactor);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HandLaunch != false) {
        output.WriteRawTag(8);
        output.WriteBool(HandLaunch);
      }
      if (Guided != false) {
        output.WriteRawTag(16);
        output.WriteBool(Guided);
      }
      if (YawLock != false) {
        output.WriteRawTag(24);
        output.WriteBool(YawLock);
      }
      if (PitchLock != false) {
        output.WriteRawTag(32);
        output.WriteBool(PitchLock);
      }
      if (BlockConfig != global::IUX.BlockConfig.Noblock) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BlockConfig);
      }
      if (HasAltHold) {
        output.WriteRawTag(53);
        output.WriteFloat(AltHold);
      }
      if (HasPFactor) {
        output.WriteRawTag(61);
        output.WriteFloat(PFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HandLaunch != false) {
        output.WriteRawTag(8);
        output.WriteBool(HandLaunch);
      }
      if (Guided != false) {
        output.WriteRawTag(16);
        output.WriteBool(Guided);
      }
      if (YawLock != false) {
        output.WriteRawTag(24);
        output.WriteBool(YawLock);
      }
      if (PitchLock != false) {
        output.WriteRawTag(32);
        output.WriteBool(PitchLock);
      }
      if (BlockConfig != global::IUX.BlockConfig.Noblock) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BlockConfig);
      }
      if (HasAltHold) {
        output.WriteRawTag(53);
        output.WriteFloat(AltHold);
      }
      if (HasPFactor) {
        output.WriteRawTag(61);
        output.WriteFloat(PFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HandLaunch != false) {
        size += 1 + 1;
      }
      if (Guided != false) {
        size += 1 + 1;
      }
      if (YawLock != false) {
        size += 1 + 1;
      }
      if (PitchLock != false) {
        size += 1 + 1;
      }
      if (BlockConfig != global::IUX.BlockConfig.Noblock) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlockConfig);
      }
      if (HasAltHold) {
        size += 1 + 4;
      }
      if (HasPFactor) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlightProfile other) {
      if (other == null) {
        return;
      }
      if (other.HandLaunch != false) {
        HandLaunch = other.HandLaunch;
      }
      if (other.Guided != false) {
        Guided = other.Guided;
      }
      if (other.YawLock != false) {
        YawLock = other.YawLock;
      }
      if (other.PitchLock != false) {
        PitchLock = other.PitchLock;
      }
      if (other.BlockConfig != global::IUX.BlockConfig.Noblock) {
        BlockConfig = other.BlockConfig;
      }
      if (other.HasAltHold) {
        AltHold = other.AltHold;
      }
      if (other.HasPFactor) {
        PFactor = other.PFactor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HandLaunch = input.ReadBool();
            break;
          }
          case 16: {
            Guided = input.ReadBool();
            break;
          }
          case 24: {
            YawLock = input.ReadBool();
            break;
          }
          case 32: {
            PitchLock = input.ReadBool();
            break;
          }
          case 40: {
            BlockConfig = (global::IUX.BlockConfig) input.ReadEnum();
            break;
          }
          case 53: {
            AltHold = input.ReadFloat();
            break;
          }
          case 61: {
            PFactor = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HandLaunch = input.ReadBool();
            break;
          }
          case 16: {
            Guided = input.ReadBool();
            break;
          }
          case 24: {
            YawLock = input.ReadBool();
            break;
          }
          case 32: {
            PitchLock = input.ReadBool();
            break;
          }
          case 40: {
            BlockConfig = (global::IUX.BlockConfig) input.ReadEnum();
            break;
          }
          case 53: {
            AltHold = input.ReadFloat();
            break;
          }
          case 61: {
            PFactor = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Point3 X,Y,Z Data structure.  
  /// Used for containing cartesian coordinates of locations, velocities, and accelerations.
  /// </summary>
  public sealed partial class Point3 : pb::IMessage<Point3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Point3> _parser = new pb::MessageParser<Point3>(() => new Point3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IUX.IUXSubstructsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3(Point3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point3 Clone() {
      return new Point3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Latitude, Longitude, and Altitude data structure.
  /// </summary>
  public sealed partial class LatLonAlt : pb::IMessage<LatLonAlt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LatLonAlt> _parser = new pb::MessageParser<LatLonAlt>(() => new LatLonAlt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatLonAlt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IUX.IUXSubstructsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatLonAlt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatLonAlt(LatLonAlt other) : this() {
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      altitude_ = other.altitude_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatLonAlt Clone() {
      return new LatLonAlt(this);
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 1;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 2;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 3;
    private float altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatLonAlt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatLonAlt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (Altitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Altitude);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Latitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Longitude);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Altitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Latitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Longitude);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Altitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (Altitude != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatLonAlt other) {
      if (other == null) {
        return;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Altitude != 0F) {
        Altitude = other.Altitude;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Latitude = input.ReadDouble();
            break;
          }
          case 17: {
            Longitude = input.ReadDouble();
            break;
          }
          case 29: {
            Altitude = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Latitude = input.ReadDouble();
            break;
          }
          case 17: {
            Longitude = input.ReadDouble();
            break;
          }
          case 29: {
            Altitude = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Azimuth, Elevation, and Time-to-Intercept target information
  /// </summary>
  public sealed partial class AzElT2 : pb::IMessage<AzElT2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AzElT2> _parser = new pb::MessageParser<AzElT2>(() => new AzElT2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AzElT2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IUX.IUXSubstructsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AzElT2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AzElT2(AzElT2 other) : this() {
      azimuth_ = other.azimuth_;
      elevation_ = other.elevation_;
      interceptTime_ = other.interceptTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AzElT2 Clone() {
      return new AzElT2(this);
    }

    /// <summary>Field number for the "azimuth" field.</summary>
    public const int AzimuthFieldNumber = 1;
    private float azimuth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Azimuth {
      get { return azimuth_; }
      set {
        azimuth_ = value;
      }
    }

    /// <summary>Field number for the "elevation" field.</summary>
    public const int ElevationFieldNumber = 2;
    private float elevation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Elevation {
      get { return elevation_; }
      set {
        elevation_ = value;
      }
    }

    /// <summary>Field number for the "intercept_time" field.</summary>
    public const int InterceptTimeFieldNumber = 3;
    private float interceptTime_;
    /// <summary>
    /// Time between firing and intercept (Value in seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InterceptTime {
      get { return interceptTime_; }
      set {
        interceptTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AzElT2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AzElT2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Azimuth, other.Azimuth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Elevation, other.Elevation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InterceptTime, other.InterceptTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Azimuth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Azimuth);
      if (Elevation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Elevation);
      if (InterceptTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InterceptTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Azimuth != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Azimuth);
      }
      if (Elevation != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Elevation);
      }
      if (InterceptTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InterceptTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Azimuth != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Azimuth);
      }
      if (Elevation != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Elevation);
      }
      if (InterceptTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InterceptTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Azimuth != 0F) {
        size += 1 + 4;
      }
      if (Elevation != 0F) {
        size += 1 + 4;
      }
      if (InterceptTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AzElT2 other) {
      if (other == null) {
        return;
      }
      if (other.Azimuth != 0F) {
        Azimuth = other.Azimuth;
      }
      if (other.Elevation != 0F) {
        Elevation = other.Elevation;
      }
      if (other.InterceptTime != 0F) {
        InterceptTime = other.InterceptTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Azimuth = input.ReadFloat();
            break;
          }
          case 21: {
            Elevation = input.ReadFloat();
            break;
          }
          case 29: {
            InterceptTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Azimuth = input.ReadFloat();
            break;
          }
          case 21: {
            Elevation = input.ReadFloat();
            break;
          }
          case 29: {
            InterceptTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Flexible Location data structure.  
  /// Used for holding location information of both targets and AirShare systems
  ///
  /// Contains one of the below location substructs
  /// </summary>
  public sealed partial class Location : pb::IMessage<Location>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IUX.IUXSubstructsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      switch (other.CoordTypeCase) {
        case CoordTypeOneofCase.LatLonAlt:
          LatLonAlt = other.LatLonAlt.Clone();
          break;
        case CoordTypeOneofCase.ECEF:
          ECEF = other.ECEF.Clone();
          break;
        case CoordTypeOneofCase.ENU:
          ENU = other.ENU.Clone();
          break;
        case CoordTypeOneofCase.AzElT2:
          AzElT2 = other.AzElT2.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "lat_lon_alt" field.</summary>
    public const int LatLonAltFieldNumber = 1;
    /// <summary>
    /// Geodetic Location information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.LatLonAlt LatLonAlt {
      get { return coordTypeCase_ == CoordTypeOneofCase.LatLonAlt ? (global::IUX.LatLonAlt) coordType_ : null; }
      set {
        coordType_ = value;
        coordTypeCase_ = value == null ? CoordTypeOneofCase.None : CoordTypeOneofCase.LatLonAlt;
      }
    }

    /// <summary>Field number for the "ECEF" field.</summary>
    public const int ECEFFieldNumber = 2;
    /// <summary>
    /// ECEF Abosolute location (Value in meters)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Point3 ECEF {
      get { return coordTypeCase_ == CoordTypeOneofCase.ECEF ? (global::IUX.Point3) coordType_ : null; }
      set {
        coordType_ = value;
        coordTypeCase_ = value == null ? CoordTypeOneofCase.None : CoordTypeOneofCase.ECEF;
      }
    }

    /// <summary>Field number for the "ENU" field.</summary>
    public const int ENUFieldNumber = 3;
    /// <summary>
    /// ENU relative location (Value in meters)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Point3 ENU {
      get { return coordTypeCase_ == CoordTypeOneofCase.ENU ? (global::IUX.Point3) coordType_ : null; }
      set {
        coordType_ = value;
        coordTypeCase_ = value == null ? CoordTypeOneofCase.None : CoordTypeOneofCase.ENU;
      }
    }

    /// <summary>Field number for the "AzElT2" field.</summary>
    public const int AzElT2FieldNumber = 4;
    /// <summary>
    /// Sudo-Spherical relative location (Angles in degrees, Time in Seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.AzElT2 AzElT2 {
      get { return coordTypeCase_ == CoordTypeOneofCase.AzElT2 ? (global::IUX.AzElT2) coordType_ : null; }
      set {
        coordType_ = value;
        coordTypeCase_ = value == null ? CoordTypeOneofCase.None : CoordTypeOneofCase.AzElT2;
      }
    }

    private object coordType_;
    /// <summary>Enum of possible cases for the "coord_type" oneof.</summary>
    public enum CoordTypeOneofCase {
      None = 0,
      LatLonAlt = 1,
      ECEF = 2,
      ENU = 3,
      AzElT2 = 4,
    }
    private CoordTypeOneofCase coordTypeCase_ = CoordTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoordTypeOneofCase CoordTypeCase {
      get { return coordTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCoordType() {
      coordTypeCase_ = CoordTypeOneofCase.None;
      coordType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LatLonAlt, other.LatLonAlt)) return false;
      if (!object.Equals(ECEF, other.ECEF)) return false;
      if (!object.Equals(ENU, other.ENU)) return false;
      if (!object.Equals(AzElT2, other.AzElT2)) return false;
      if (CoordTypeCase != other.CoordTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coordTypeCase_ == CoordTypeOneofCase.LatLonAlt) hash ^= LatLonAlt.GetHashCode();
      if (coordTypeCase_ == CoordTypeOneofCase.ECEF) hash ^= ECEF.GetHashCode();
      if (coordTypeCase_ == CoordTypeOneofCase.ENU) hash ^= ENU.GetHashCode();
      if (coordTypeCase_ == CoordTypeOneofCase.AzElT2) hash ^= AzElT2.GetHashCode();
      hash ^= (int) coordTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (coordTypeCase_ == CoordTypeOneofCase.LatLonAlt) {
        output.WriteRawTag(10);
        output.WriteMessage(LatLonAlt);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.ECEF) {
        output.WriteRawTag(18);
        output.WriteMessage(ECEF);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.ENU) {
        output.WriteRawTag(26);
        output.WriteMessage(ENU);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.AzElT2) {
        output.WriteRawTag(34);
        output.WriteMessage(AzElT2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (coordTypeCase_ == CoordTypeOneofCase.LatLonAlt) {
        output.WriteRawTag(10);
        output.WriteMessage(LatLonAlt);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.ECEF) {
        output.WriteRawTag(18);
        output.WriteMessage(ECEF);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.ENU) {
        output.WriteRawTag(26);
        output.WriteMessage(ENU);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.AzElT2) {
        output.WriteRawTag(34);
        output.WriteMessage(AzElT2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coordTypeCase_ == CoordTypeOneofCase.LatLonAlt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatLonAlt);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.ECEF) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ECEF);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.ENU) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ENU);
      }
      if (coordTypeCase_ == CoordTypeOneofCase.AzElT2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AzElT2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      switch (other.CoordTypeCase) {
        case CoordTypeOneofCase.LatLonAlt:
          if (LatLonAlt == null) {
            LatLonAlt = new global::IUX.LatLonAlt();
          }
          LatLonAlt.MergeFrom(other.LatLonAlt);
          break;
        case CoordTypeOneofCase.ECEF:
          if (ECEF == null) {
            ECEF = new global::IUX.Point3();
          }
          ECEF.MergeFrom(other.ECEF);
          break;
        case CoordTypeOneofCase.ENU:
          if (ENU == null) {
            ENU = new global::IUX.Point3();
          }
          ENU.MergeFrom(other.ENU);
          break;
        case CoordTypeOneofCase.AzElT2:
          if (AzElT2 == null) {
            AzElT2 = new global::IUX.AzElT2();
          }
          AzElT2.MergeFrom(other.AzElT2);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::IUX.LatLonAlt subBuilder = new global::IUX.LatLonAlt();
            if (coordTypeCase_ == CoordTypeOneofCase.LatLonAlt) {
              subBuilder.MergeFrom(LatLonAlt);
            }
            input.ReadMessage(subBuilder);
            LatLonAlt = subBuilder;
            break;
          }
          case 18: {
            global::IUX.Point3 subBuilder = new global::IUX.Point3();
            if (coordTypeCase_ == CoordTypeOneofCase.ECEF) {
              subBuilder.MergeFrom(ECEF);
            }
            input.ReadMessage(subBuilder);
            ECEF = subBuilder;
            break;
          }
          case 26: {
            global::IUX.Point3 subBuilder = new global::IUX.Point3();
            if (coordTypeCase_ == CoordTypeOneofCase.ENU) {
              subBuilder.MergeFrom(ENU);
            }
            input.ReadMessage(subBuilder);
            ENU = subBuilder;
            break;
          }
          case 34: {
            global::IUX.AzElT2 subBuilder = new global::IUX.AzElT2();
            if (coordTypeCase_ == CoordTypeOneofCase.AzElT2) {
              subBuilder.MergeFrom(AzElT2);
            }
            input.ReadMessage(subBuilder);
            AzElT2 = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::IUX.LatLonAlt subBuilder = new global::IUX.LatLonAlt();
            if (coordTypeCase_ == CoordTypeOneofCase.LatLonAlt) {
              subBuilder.MergeFrom(LatLonAlt);
            }
            input.ReadMessage(subBuilder);
            LatLonAlt = subBuilder;
            break;
          }
          case 18: {
            global::IUX.Point3 subBuilder = new global::IUX.Point3();
            if (coordTypeCase_ == CoordTypeOneofCase.ECEF) {
              subBuilder.MergeFrom(ECEF);
            }
            input.ReadMessage(subBuilder);
            ECEF = subBuilder;
            break;
          }
          case 26: {
            global::IUX.Point3 subBuilder = new global::IUX.Point3();
            if (coordTypeCase_ == CoordTypeOneofCase.ENU) {
              subBuilder.MergeFrom(ENU);
            }
            input.ReadMessage(subBuilder);
            ENU = subBuilder;
            break;
          }
          case 34: {
            global::IUX.AzElT2 subBuilder = new global::IUX.AzElT2();
            if (coordTypeCase_ == CoordTypeOneofCase.AzElT2) {
              subBuilder.MergeFrom(AzElT2);
            }
            input.ReadMessage(subBuilder);
            AzElT2 = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Attitude data structure for Roll, Pitch, and Yaw
  /// </summary>
  public sealed partial class Attitude : pb::IMessage<Attitude>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Attitude> _parser = new pb::MessageParser<Attitude>(() => new Attitude());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Attitude> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IUX.IUXSubstructsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attitude() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attitude(Attitude other) : this() {
      yaw_ = other.yaw_;
      pitch_ = other.pitch_;
      roll_ = other.roll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Attitude Clone() {
      return new Attitude(this);
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 1;
    private float yaw_;
    /// <summary>
    /// Axis determined per device (Value in degrees)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 2;
    private float pitch_;
    /// <summary>
    /// Axis determined per device (Value in degrees)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 3;
    private float roll_;
    /// <summary>
    /// Axis determined per device (Value in degrees)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Attitude);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Attitude other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roll, other.Roll)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Yaw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Yaw);
      if (Pitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (Roll != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roll);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Yaw != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Yaw);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Pitch);
      }
      if (Roll != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Yaw != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Yaw);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Pitch);
      }
      if (Roll != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Roll != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Attitude other) {
      if (other == null) {
        return;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Yaw = input.ReadFloat();
            break;
          }
          case 21: {
            Pitch = input.ReadFloat();
            break;
          }
          case 29: {
            Roll = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Yaw = input.ReadFloat();
            break;
          }
          case 21: {
            Pitch = input.ReadFloat();
            break;
          }
          case 29: {
            Roll = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
