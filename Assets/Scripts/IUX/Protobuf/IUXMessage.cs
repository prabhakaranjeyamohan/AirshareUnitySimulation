// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: IUX_message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IUX {

  /// <summary>Holder for reflection information generated from IUX_message.proto</summary>
  public static partial class IUXMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for IUX_message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IUXMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFJVVhfbWVzc2FnZS5wcm90bxIDSVVYGhVJVVhfc3VibWVzc2FnZXMucHJv",
            "dG8aDUlVWF9PVFMucHJvdG8aDUlVWF9EQVMucHJvdG8i9gsKB01lc3NhZ2US",
            "JAoKcGxhaW5fdGV4dBgBIAEoCzIOLklVWC5QbGFpblRleHRIABIjCglicm9h",
            "ZGNhc3QYAiABKAsyDi5JVVguQnJvYWRjYXN0SAASLgoPYnJvYWRjYXN0X3Jl",
            "cGx5GAMgASgLMhMuSVVYLkJyb2FkY2FzdFJlcGx5SAASHQoGbGF1bmNoGAQg",
            "ASgLMgsuSVVYLkxhdW5jaEgAEjEKEXRhcmdldF9wb3NfdXBkYXRlGAUgASgL",
            "MhQuSVVYLlRhcmdldFBvc1VwZGF0ZUgAEhsKBWFib3J0GAYgASgLMgouSVVY",
            "LkFib3J0SAASFwoDYXJtGAcgASgLMgguSVVYLkFybUgAEigKDHN0ZWVyX3Vw",
            "ZGF0ZRgIIAEoCzIQLklVWC5TdGVlclVwZGF0ZUgAEjYKE3JlcXVlc3RfY2Fs",
            "aWJyYXRpb24YCSABKAsyFy5JVVguUmVxdWVzdENhbGlicmF0aW9uSAASJwoL",
            "Y2FsaWJyYXRpb24YCiABKAsyEC5JVVguQ2FsaWJyYXRpb25IABIsCg5yZXF1",
            "ZXN0X3N0YXR1cxgLIAEoCzISLklVWC5SZXF1ZXN0U3RhdHVzSAASHQoGc3Rh",
            "dHVzGAwgASgLMgsuSVVYLlN0YXR1c0gAEh0KBmRpc2FybRgNIAEoCzILLklV",
            "WC5EaXNhcm1IABIbCgVyZXNldBgOIAEoCzIKLklVWC5SZXNldEgAEjUKE3Jh",
            "aWxfc3RhdHVzX3JlcXVlc3QYDyABKAsyFi5JVVguUmFpbFN0YXR1c1JlcXVl",
            "c3RIABImCgtyYWlsX3N0YXR1cxgQIAEoCzIPLklVWC5SYWlsU3RhdHVzSAAS",
            "NgoUdHVycmV0X2N1ZV90b190YXJnZXQYESABKAsyFi5JVVguVHVycmV0Q3Vl",
            "VG9UYXJnZXRIABIwChB0dXJyZXRfY2FsaWJyYXRlGBIgASgLMhQuSVVYLlR1",
            "cnJldENhbGlicmF0ZUgAEjkKFXR1cnJldF9lbWVyZ2VuY3lfc3RvcBgTIAEo",
            "CzIYLklVWC5UdXJyZXRFbWVyZ2VuY3lTdG9wSAASKAoMdHVycmV0X3RyYWNr",
            "GBQgASgLMhAuSVVYLlR1cnJldFRyYWNrSAASOQoVdHVycmV0X3N0YXR1c19y",
            "ZXF1ZXN0GBUgASgLMhguSVVYLlR1cnJldFN0YXR1c1JlcXVlc3RIABIqCg10",
            "dXJyZXRfc3RhdHVzGBYgASgLMhEuSVVYLlR1cnJldFN0YXR1c0gAEi0KD3Jl",
            "YWR5X3RvX2xhdW5jaBgXIAEoCzISLklVWC5SZWFkeVRvTGF1bmNoSAASIAoI",
            "YXJtX3JhaWwYGCABKAsyDC5JVVguQXJtUmFpbEgAEiYKC2Rpc2FybV9yYWls",
            "GBkgASgLMg8uSVVYLkRpc2FybVJhaWxIABImCgtsYXVuY2hfcmFpbBgaIAEo",
            "CzIPLklVWC5MYXVuY2hSYWlsSAASLAoObWlzc2lsZV9sb2FkZWQYGyABKAsy",
            "Ei5JVVguTWlzc2lsZUxvYWRlZEgAEjAKEG1pc3NpbGVfdW5sb2FkZWQYHCAB",
            "KAsyFC5JVVguTWlzc2lsZVVubG9hZGVkSAASKAoMdHVycmV0X3Jlc2V0GB0g",
            "ASgLMhAuSVVYLlR1cnJldFJlc2V0SAASJgoLYnNzX3JlcXVlc3QYHiABKAsy",
            "Dy5JVVguQlNTUmVxdWVzdEgAEiIKCWJzc19yZXBseRgfIAEoCzINLklVWC5C",
            "U1NSZXBseUgAEjMKEm90c19yZXF1ZXN0X2NvbmZpZxggIAEoCzIVLklVWC5P",
            "VFNSZXF1ZXN0Q29uZmlnSAASJAoKb3RzX2NvbmZpZxghIAEoCzIOLklVWC5P",
            "VFNDb25maWdIABImCgtvdHNfY29udHJvbBgiIAEoCzIPLklVWC5PVFNDb250",
            "cm9sSAASNQoTZGFzX3NpbXVsYXRpb25fZGF0YRgjIAEoCzIWLklVWC5EQVNT",
            "aW11bGF0aW9uRGF0YUgAQg4KDG1lc3NhZ2VfdHlwZUIfChBjb20uYWlyc2hh",
            "cmUuaXV4QgNJVVhIAaICA0lVWFAAUAFQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IUX.IUXSubmessagesReflection.Descriptor, global::IUX.IUXOTSReflection.Descriptor, global::IUX.IUXDASReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IUX.Message), global::IUX.Message.Parser, new[]{ "PlainText", "Broadcast", "BroadcastReply", "Launch", "TargetPosUpdate", "Abort", "Arm", "SteerUpdate", "RequestCalibration", "Calibration", "RequestStatus", "Status", "Disarm", "Reset", "RailStatusRequest", "RailStatus", "TurretCueToTarget", "TurretCalibrate", "TurretEmergencyStop", "TurretTrack", "TurretStatusRequest", "TurretStatus", "ReadyToLaunch", "ArmRail", "DisarmRail", "LaunchRail", "MissileLoaded", "MissileUnloaded", "TurretReset", "BssRequest", "BssReply", "OtsRequestConfig", "OtsConfig", "OtsControl", "DasSimulationData" }, new[]{ "MessageType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// __This is the Parent message class. All IUX messages are one of these messages__  
  /// Each IUX message contains one of the various listed submessages. This is the heart and soul of the IUX protobuf specification.  
  /// Any message that is added to the standard should be added under the oneof of this message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IUX.IUXMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.PlainText:
          PlainText = other.PlainText.Clone();
          break;
        case MessageTypeOneofCase.Broadcast:
          Broadcast = other.Broadcast.Clone();
          break;
        case MessageTypeOneofCase.BroadcastReply:
          BroadcastReply = other.BroadcastReply.Clone();
          break;
        case MessageTypeOneofCase.Launch:
          Launch = other.Launch.Clone();
          break;
        case MessageTypeOneofCase.TargetPosUpdate:
          TargetPosUpdate = other.TargetPosUpdate.Clone();
          break;
        case MessageTypeOneofCase.Abort:
          Abort = other.Abort.Clone();
          break;
        case MessageTypeOneofCase.Arm:
          Arm = other.Arm.Clone();
          break;
        case MessageTypeOneofCase.SteerUpdate:
          SteerUpdate = other.SteerUpdate.Clone();
          break;
        case MessageTypeOneofCase.RequestCalibration:
          RequestCalibration = other.RequestCalibration.Clone();
          break;
        case MessageTypeOneofCase.Calibration:
          Calibration = other.Calibration.Clone();
          break;
        case MessageTypeOneofCase.RequestStatus:
          RequestStatus = other.RequestStatus.Clone();
          break;
        case MessageTypeOneofCase.Status:
          Status = other.Status.Clone();
          break;
        case MessageTypeOneofCase.Disarm:
          Disarm = other.Disarm.Clone();
          break;
        case MessageTypeOneofCase.Reset:
          Reset = other.Reset.Clone();
          break;
        case MessageTypeOneofCase.RailStatusRequest:
          RailStatusRequest = other.RailStatusRequest.Clone();
          break;
        case MessageTypeOneofCase.RailStatus:
          RailStatus = other.RailStatus.Clone();
          break;
        case MessageTypeOneofCase.TurretCueToTarget:
          TurretCueToTarget = other.TurretCueToTarget.Clone();
          break;
        case MessageTypeOneofCase.TurretCalibrate:
          TurretCalibrate = other.TurretCalibrate.Clone();
          break;
        case MessageTypeOneofCase.TurretEmergencyStop:
          TurretEmergencyStop = other.TurretEmergencyStop.Clone();
          break;
        case MessageTypeOneofCase.TurretTrack:
          TurretTrack = other.TurretTrack.Clone();
          break;
        case MessageTypeOneofCase.TurretStatusRequest:
          TurretStatusRequest = other.TurretStatusRequest.Clone();
          break;
        case MessageTypeOneofCase.TurretStatus:
          TurretStatus = other.TurretStatus.Clone();
          break;
        case MessageTypeOneofCase.ReadyToLaunch:
          ReadyToLaunch = other.ReadyToLaunch.Clone();
          break;
        case MessageTypeOneofCase.ArmRail:
          ArmRail = other.ArmRail.Clone();
          break;
        case MessageTypeOneofCase.DisarmRail:
          DisarmRail = other.DisarmRail.Clone();
          break;
        case MessageTypeOneofCase.LaunchRail:
          LaunchRail = other.LaunchRail.Clone();
          break;
        case MessageTypeOneofCase.MissileLoaded:
          MissileLoaded = other.MissileLoaded.Clone();
          break;
        case MessageTypeOneofCase.MissileUnloaded:
          MissileUnloaded = other.MissileUnloaded.Clone();
          break;
        case MessageTypeOneofCase.TurretReset:
          TurretReset = other.TurretReset.Clone();
          break;
        case MessageTypeOneofCase.BssRequest:
          BssRequest = other.BssRequest.Clone();
          break;
        case MessageTypeOneofCase.BssReply:
          BssReply = other.BssReply.Clone();
          break;
        case MessageTypeOneofCase.OtsRequestConfig:
          OtsRequestConfig = other.OtsRequestConfig.Clone();
          break;
        case MessageTypeOneofCase.OtsConfig:
          OtsConfig = other.OtsConfig.Clone();
          break;
        case MessageTypeOneofCase.OtsControl:
          OtsControl = other.OtsControl.Clone();
          break;
        case MessageTypeOneofCase.DasSimulationData:
          DasSimulationData = other.DasSimulationData.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "plain_text" field.</summary>
    public const int PlainTextFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.PlainText PlainText {
      get { return messageTypeCase_ == MessageTypeOneofCase.PlainText ? (global::IUX.PlainText) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.PlainText;
      }
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Broadcast Broadcast {
      get { return messageTypeCase_ == MessageTypeOneofCase.Broadcast ? (global::IUX.Broadcast) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Broadcast;
      }
    }

    /// <summary>Field number for the "broadcast_reply" field.</summary>
    public const int BroadcastReplyFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.BroadcastReply BroadcastReply {
      get { return messageTypeCase_ == MessageTypeOneofCase.BroadcastReply ? (global::IUX.BroadcastReply) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.BroadcastReply;
      }
    }

    /// <summary>Field number for the "launch" field.</summary>
    public const int LaunchFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Launch Launch {
      get { return messageTypeCase_ == MessageTypeOneofCase.Launch ? (global::IUX.Launch) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Launch;
      }
    }

    /// <summary>Field number for the "target_pos_update" field.</summary>
    public const int TargetPosUpdateFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TargetPosUpdate TargetPosUpdate {
      get { return messageTypeCase_ == MessageTypeOneofCase.TargetPosUpdate ? (global::IUX.TargetPosUpdate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TargetPosUpdate;
      }
    }

    /// <summary>Field number for the "abort" field.</summary>
    public const int AbortFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Abort Abort {
      get { return messageTypeCase_ == MessageTypeOneofCase.Abort ? (global::IUX.Abort) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Abort;
      }
    }

    /// <summary>Field number for the "arm" field.</summary>
    public const int ArmFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Arm Arm {
      get { return messageTypeCase_ == MessageTypeOneofCase.Arm ? (global::IUX.Arm) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Arm;
      }
    }

    /// <summary>Field number for the "steer_update" field.</summary>
    public const int SteerUpdateFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.SteerUpdate SteerUpdate {
      get { return messageTypeCase_ == MessageTypeOneofCase.SteerUpdate ? (global::IUX.SteerUpdate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.SteerUpdate;
      }
    }

    /// <summary>Field number for the "request_calibration" field.</summary>
    public const int RequestCalibrationFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.RequestCalibration RequestCalibration {
      get { return messageTypeCase_ == MessageTypeOneofCase.RequestCalibration ? (global::IUX.RequestCalibration) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.RequestCalibration;
      }
    }

    /// <summary>Field number for the "calibration" field.</summary>
    public const int CalibrationFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Calibration Calibration {
      get { return messageTypeCase_ == MessageTypeOneofCase.Calibration ? (global::IUX.Calibration) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Calibration;
      }
    }

    /// <summary>Field number for the "request_status" field.</summary>
    public const int RequestStatusFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.RequestStatus RequestStatus {
      get { return messageTypeCase_ == MessageTypeOneofCase.RequestStatus ? (global::IUX.RequestStatus) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.RequestStatus;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Status Status {
      get { return messageTypeCase_ == MessageTypeOneofCase.Status ? (global::IUX.Status) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Status;
      }
    }

    /// <summary>Field number for the "disarm" field.</summary>
    public const int DisarmFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Disarm Disarm {
      get { return messageTypeCase_ == MessageTypeOneofCase.Disarm ? (global::IUX.Disarm) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Disarm;
      }
    }

    /// <summary>Field number for the "reset" field.</summary>
    public const int ResetFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.Reset Reset {
      get { return messageTypeCase_ == MessageTypeOneofCase.Reset ? (global::IUX.Reset) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Reset;
      }
    }

    /// <summary>Field number for the "rail_status_request" field.</summary>
    public const int RailStatusRequestFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.RailStatusRequest RailStatusRequest {
      get { return messageTypeCase_ == MessageTypeOneofCase.RailStatusRequest ? (global::IUX.RailStatusRequest) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.RailStatusRequest;
      }
    }

    /// <summary>Field number for the "rail_status" field.</summary>
    public const int RailStatusFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.RailStatus RailStatus {
      get { return messageTypeCase_ == MessageTypeOneofCase.RailStatus ? (global::IUX.RailStatus) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.RailStatus;
      }
    }

    /// <summary>Field number for the "turret_cue_to_target" field.</summary>
    public const int TurretCueToTargetFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TurretCueToTarget TurretCueToTarget {
      get { return messageTypeCase_ == MessageTypeOneofCase.TurretCueToTarget ? (global::IUX.TurretCueToTarget) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TurretCueToTarget;
      }
    }

    /// <summary>Field number for the "turret_calibrate" field.</summary>
    public const int TurretCalibrateFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TurretCalibrate TurretCalibrate {
      get { return messageTypeCase_ == MessageTypeOneofCase.TurretCalibrate ? (global::IUX.TurretCalibrate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TurretCalibrate;
      }
    }

    /// <summary>Field number for the "turret_emergency_stop" field.</summary>
    public const int TurretEmergencyStopFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TurretEmergencyStop TurretEmergencyStop {
      get { return messageTypeCase_ == MessageTypeOneofCase.TurretEmergencyStop ? (global::IUX.TurretEmergencyStop) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TurretEmergencyStop;
      }
    }

    /// <summary>Field number for the "turret_track" field.</summary>
    public const int TurretTrackFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TurretTrack TurretTrack {
      get { return messageTypeCase_ == MessageTypeOneofCase.TurretTrack ? (global::IUX.TurretTrack) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TurretTrack;
      }
    }

    /// <summary>Field number for the "turret_status_request" field.</summary>
    public const int TurretStatusRequestFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TurretStatusRequest TurretStatusRequest {
      get { return messageTypeCase_ == MessageTypeOneofCase.TurretStatusRequest ? (global::IUX.TurretStatusRequest) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TurretStatusRequest;
      }
    }

    /// <summary>Field number for the "turret_status" field.</summary>
    public const int TurretStatusFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TurretStatus TurretStatus {
      get { return messageTypeCase_ == MessageTypeOneofCase.TurretStatus ? (global::IUX.TurretStatus) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TurretStatus;
      }
    }

    /// <summary>Field number for the "ready_to_launch" field.</summary>
    public const int ReadyToLaunchFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.ReadyToLaunch ReadyToLaunch {
      get { return messageTypeCase_ == MessageTypeOneofCase.ReadyToLaunch ? (global::IUX.ReadyToLaunch) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ReadyToLaunch;
      }
    }

    /// <summary>Field number for the "arm_rail" field.</summary>
    public const int ArmRailFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.ArmRail ArmRail {
      get { return messageTypeCase_ == MessageTypeOneofCase.ArmRail ? (global::IUX.ArmRail) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ArmRail;
      }
    }

    /// <summary>Field number for the "disarm_rail" field.</summary>
    public const int DisarmRailFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.DisarmRail DisarmRail {
      get { return messageTypeCase_ == MessageTypeOneofCase.DisarmRail ? (global::IUX.DisarmRail) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.DisarmRail;
      }
    }

    /// <summary>Field number for the "launch_rail" field.</summary>
    public const int LaunchRailFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.LaunchRail LaunchRail {
      get { return messageTypeCase_ == MessageTypeOneofCase.LaunchRail ? (global::IUX.LaunchRail) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.LaunchRail;
      }
    }

    /// <summary>Field number for the "missile_loaded" field.</summary>
    public const int MissileLoadedFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.MissileLoaded MissileLoaded {
      get { return messageTypeCase_ == MessageTypeOneofCase.MissileLoaded ? (global::IUX.MissileLoaded) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MissileLoaded;
      }
    }

    /// <summary>Field number for the "missile_unloaded" field.</summary>
    public const int MissileUnloadedFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.MissileUnloaded MissileUnloaded {
      get { return messageTypeCase_ == MessageTypeOneofCase.MissileUnloaded ? (global::IUX.MissileUnloaded) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MissileUnloaded;
      }
    }

    /// <summary>Field number for the "turret_reset" field.</summary>
    public const int TurretResetFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.TurretReset TurretReset {
      get { return messageTypeCase_ == MessageTypeOneofCase.TurretReset ? (global::IUX.TurretReset) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TurretReset;
      }
    }

    /// <summary>Field number for the "bss_request" field.</summary>
    public const int BssRequestFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.BSSRequest BssRequest {
      get { return messageTypeCase_ == MessageTypeOneofCase.BssRequest ? (global::IUX.BSSRequest) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.BssRequest;
      }
    }

    /// <summary>Field number for the "bss_reply" field.</summary>
    public const int BssReplyFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.BSSReply BssReply {
      get { return messageTypeCase_ == MessageTypeOneofCase.BssReply ? (global::IUX.BSSReply) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.BssReply;
      }
    }

    /// <summary>Field number for the "ots_request_config" field.</summary>
    public const int OtsRequestConfigFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.OTSRequestConfig OtsRequestConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.OtsRequestConfig ? (global::IUX.OTSRequestConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.OtsRequestConfig;
      }
    }

    /// <summary>Field number for the "ots_config" field.</summary>
    public const int OtsConfigFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.OTSConfig OtsConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.OtsConfig ? (global::IUX.OTSConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.OtsConfig;
      }
    }

    /// <summary>Field number for the "ots_control" field.</summary>
    public const int OtsControlFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.OTSControl OtsControl {
      get { return messageTypeCase_ == MessageTypeOneofCase.OtsControl ? (global::IUX.OTSControl) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.OtsControl;
      }
    }

    /// <summary>Field number for the "das_simulation_data" field.</summary>
    public const int DasSimulationDataFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IUX.DASSimulationData DasSimulationData {
      get { return messageTypeCase_ == MessageTypeOneofCase.DasSimulationData ? (global::IUX.DASSimulationData) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.DasSimulationData;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "message_type" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      PlainText = 1,
      Broadcast = 2,
      BroadcastReply = 3,
      Launch = 4,
      TargetPosUpdate = 5,
      Abort = 6,
      Arm = 7,
      SteerUpdate = 8,
      RequestCalibration = 9,
      Calibration = 10,
      RequestStatus = 11,
      Status = 12,
      Disarm = 13,
      Reset = 14,
      RailStatusRequest = 15,
      RailStatus = 16,
      TurretCueToTarget = 17,
      TurretCalibrate = 18,
      TurretEmergencyStop = 19,
      TurretTrack = 20,
      TurretStatusRequest = 21,
      TurretStatus = 22,
      ReadyToLaunch = 23,
      ArmRail = 24,
      DisarmRail = 25,
      LaunchRail = 26,
      MissileLoaded = 27,
      MissileUnloaded = 28,
      TurretReset = 29,
      BssRequest = 30,
      BssReply = 31,
      OtsRequestConfig = 32,
      OtsConfig = 33,
      OtsControl = 34,
      DasSimulationData = 35,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlainText, other.PlainText)) return false;
      if (!object.Equals(Broadcast, other.Broadcast)) return false;
      if (!object.Equals(BroadcastReply, other.BroadcastReply)) return false;
      if (!object.Equals(Launch, other.Launch)) return false;
      if (!object.Equals(TargetPosUpdate, other.TargetPosUpdate)) return false;
      if (!object.Equals(Abort, other.Abort)) return false;
      if (!object.Equals(Arm, other.Arm)) return false;
      if (!object.Equals(SteerUpdate, other.SteerUpdate)) return false;
      if (!object.Equals(RequestCalibration, other.RequestCalibration)) return false;
      if (!object.Equals(Calibration, other.Calibration)) return false;
      if (!object.Equals(RequestStatus, other.RequestStatus)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Disarm, other.Disarm)) return false;
      if (!object.Equals(Reset, other.Reset)) return false;
      if (!object.Equals(RailStatusRequest, other.RailStatusRequest)) return false;
      if (!object.Equals(RailStatus, other.RailStatus)) return false;
      if (!object.Equals(TurretCueToTarget, other.TurretCueToTarget)) return false;
      if (!object.Equals(TurretCalibrate, other.TurretCalibrate)) return false;
      if (!object.Equals(TurretEmergencyStop, other.TurretEmergencyStop)) return false;
      if (!object.Equals(TurretTrack, other.TurretTrack)) return false;
      if (!object.Equals(TurretStatusRequest, other.TurretStatusRequest)) return false;
      if (!object.Equals(TurretStatus, other.TurretStatus)) return false;
      if (!object.Equals(ReadyToLaunch, other.ReadyToLaunch)) return false;
      if (!object.Equals(ArmRail, other.ArmRail)) return false;
      if (!object.Equals(DisarmRail, other.DisarmRail)) return false;
      if (!object.Equals(LaunchRail, other.LaunchRail)) return false;
      if (!object.Equals(MissileLoaded, other.MissileLoaded)) return false;
      if (!object.Equals(MissileUnloaded, other.MissileUnloaded)) return false;
      if (!object.Equals(TurretReset, other.TurretReset)) return false;
      if (!object.Equals(BssRequest, other.BssRequest)) return false;
      if (!object.Equals(BssReply, other.BssReply)) return false;
      if (!object.Equals(OtsRequestConfig, other.OtsRequestConfig)) return false;
      if (!object.Equals(OtsConfig, other.OtsConfig)) return false;
      if (!object.Equals(OtsControl, other.OtsControl)) return false;
      if (!object.Equals(DasSimulationData, other.DasSimulationData)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageTypeCase_ == MessageTypeOneofCase.PlainText) hash ^= PlainText.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Broadcast) hash ^= Broadcast.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.BroadcastReply) hash ^= BroadcastReply.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Launch) hash ^= Launch.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TargetPosUpdate) hash ^= TargetPosUpdate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Abort) hash ^= Abort.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Arm) hash ^= Arm.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.SteerUpdate) hash ^= SteerUpdate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.RequestCalibration) hash ^= RequestCalibration.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Calibration) hash ^= Calibration.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.RequestStatus) hash ^= RequestStatus.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Status) hash ^= Status.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Disarm) hash ^= Disarm.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Reset) hash ^= Reset.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatusRequest) hash ^= RailStatusRequest.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatus) hash ^= RailStatus.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCueToTarget) hash ^= TurretCueToTarget.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCalibrate) hash ^= TurretCalibrate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TurretEmergencyStop) hash ^= TurretEmergencyStop.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TurretTrack) hash ^= TurretTrack.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatusRequest) hash ^= TurretStatusRequest.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatus) hash ^= TurretStatus.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ReadyToLaunch) hash ^= ReadyToLaunch.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ArmRail) hash ^= ArmRail.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.DisarmRail) hash ^= DisarmRail.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.LaunchRail) hash ^= LaunchRail.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MissileLoaded) hash ^= MissileLoaded.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MissileUnloaded) hash ^= MissileUnloaded.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TurretReset) hash ^= TurretReset.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.BssRequest) hash ^= BssRequest.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.BssReply) hash ^= BssReply.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.OtsRequestConfig) hash ^= OtsRequestConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.OtsConfig) hash ^= OtsConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.OtsControl) hash ^= OtsControl.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.DasSimulationData) hash ^= DasSimulationData.GetHashCode();
      hash ^= (int) messageTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (messageTypeCase_ == MessageTypeOneofCase.PlainText) {
        output.WriteRawTag(10);
        output.WriteMessage(PlainText);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Broadcast) {
        output.WriteRawTag(18);
        output.WriteMessage(Broadcast);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BroadcastReply) {
        output.WriteRawTag(26);
        output.WriteMessage(BroadcastReply);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Launch) {
        output.WriteRawTag(34);
        output.WriteMessage(Launch);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TargetPosUpdate) {
        output.WriteRawTag(42);
        output.WriteMessage(TargetPosUpdate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Abort) {
        output.WriteRawTag(50);
        output.WriteMessage(Abort);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Arm) {
        output.WriteRawTag(58);
        output.WriteMessage(Arm);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SteerUpdate) {
        output.WriteRawTag(66);
        output.WriteMessage(SteerUpdate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RequestCalibration) {
        output.WriteRawTag(74);
        output.WriteMessage(RequestCalibration);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Calibration) {
        output.WriteRawTag(82);
        output.WriteMessage(Calibration);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RequestStatus) {
        output.WriteRawTag(90);
        output.WriteMessage(RequestStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Status) {
        output.WriteRawTag(98);
        output.WriteMessage(Status);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Disarm) {
        output.WriteRawTag(106);
        output.WriteMessage(Disarm);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Reset) {
        output.WriteRawTag(114);
        output.WriteMessage(Reset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatusRequest) {
        output.WriteRawTag(122);
        output.WriteMessage(RailStatusRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatus) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RailStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCueToTarget) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TurretCueToTarget);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCalibrate) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(TurretCalibrate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretEmergencyStop) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TurretEmergencyStop);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretTrack) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(TurretTrack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatusRequest) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TurretStatusRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatus) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(TurretStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ReadyToLaunch) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ReadyToLaunch);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ArmRail) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ArmRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DisarmRail) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(DisarmRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.LaunchRail) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(LaunchRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MissileLoaded) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(MissileLoaded);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MissileUnloaded) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(MissileUnloaded);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretReset) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(TurretReset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BssRequest) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(BssRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BssReply) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(BssReply);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsRequestConfig) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(OtsRequestConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsConfig) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(OtsConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsControl) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(OtsControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DasSimulationData) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(DasSimulationData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (messageTypeCase_ == MessageTypeOneofCase.PlainText) {
        output.WriteRawTag(10);
        output.WriteMessage(PlainText);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Broadcast) {
        output.WriteRawTag(18);
        output.WriteMessage(Broadcast);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BroadcastReply) {
        output.WriteRawTag(26);
        output.WriteMessage(BroadcastReply);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Launch) {
        output.WriteRawTag(34);
        output.WriteMessage(Launch);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TargetPosUpdate) {
        output.WriteRawTag(42);
        output.WriteMessage(TargetPosUpdate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Abort) {
        output.WriteRawTag(50);
        output.WriteMessage(Abort);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Arm) {
        output.WriteRawTag(58);
        output.WriteMessage(Arm);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SteerUpdate) {
        output.WriteRawTag(66);
        output.WriteMessage(SteerUpdate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RequestCalibration) {
        output.WriteRawTag(74);
        output.WriteMessage(RequestCalibration);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Calibration) {
        output.WriteRawTag(82);
        output.WriteMessage(Calibration);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RequestStatus) {
        output.WriteRawTag(90);
        output.WriteMessage(RequestStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Status) {
        output.WriteRawTag(98);
        output.WriteMessage(Status);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Disarm) {
        output.WriteRawTag(106);
        output.WriteMessage(Disarm);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Reset) {
        output.WriteRawTag(114);
        output.WriteMessage(Reset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatusRequest) {
        output.WriteRawTag(122);
        output.WriteMessage(RailStatusRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatus) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(RailStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCueToTarget) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TurretCueToTarget);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCalibrate) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(TurretCalibrate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretEmergencyStop) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TurretEmergencyStop);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretTrack) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(TurretTrack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatusRequest) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TurretStatusRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatus) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(TurretStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ReadyToLaunch) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ReadyToLaunch);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ArmRail) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ArmRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DisarmRail) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(DisarmRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.LaunchRail) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(LaunchRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MissileLoaded) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(MissileLoaded);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MissileUnloaded) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(MissileUnloaded);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretReset) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(TurretReset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BssRequest) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(BssRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BssReply) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(BssReply);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsRequestConfig) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(OtsRequestConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsConfig) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(OtsConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsControl) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(OtsControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DasSimulationData) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(DasSimulationData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageTypeCase_ == MessageTypeOneofCase.PlainText) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlainText);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Broadcast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Broadcast);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BroadcastReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BroadcastReply);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Launch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Launch);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TargetPosUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPosUpdate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Abort) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abort);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Arm) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arm);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SteerUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SteerUpdate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RequestCalibration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestCalibration);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Calibration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Calibration);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RequestStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Status) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Disarm) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disarm);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Reset) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatusRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RailStatusRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RailStatus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RailStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCueToTarget) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurretCueToTarget);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretCalibrate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurretCalibrate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretEmergencyStop) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurretEmergencyStop);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretTrack) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurretTrack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatusRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurretStatusRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretStatus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurretStatus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ReadyToLaunch) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReadyToLaunch);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ArmRail) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArmRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DisarmRail) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisarmRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.LaunchRail) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LaunchRail);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MissileLoaded) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MissileLoaded);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MissileUnloaded) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MissileUnloaded);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TurretReset) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TurretReset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BssRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BssRequest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BssReply) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BssReply);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsRequestConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OtsRequestConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OtsConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OtsControl) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OtsControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DasSimulationData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DasSimulationData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.PlainText:
          if (PlainText == null) {
            PlainText = new global::IUX.PlainText();
          }
          PlainText.MergeFrom(other.PlainText);
          break;
        case MessageTypeOneofCase.Broadcast:
          if (Broadcast == null) {
            Broadcast = new global::IUX.Broadcast();
          }
          Broadcast.MergeFrom(other.Broadcast);
          break;
        case MessageTypeOneofCase.BroadcastReply:
          if (BroadcastReply == null) {
            BroadcastReply = new global::IUX.BroadcastReply();
          }
          BroadcastReply.MergeFrom(other.BroadcastReply);
          break;
        case MessageTypeOneofCase.Launch:
          if (Launch == null) {
            Launch = new global::IUX.Launch();
          }
          Launch.MergeFrom(other.Launch);
          break;
        case MessageTypeOneofCase.TargetPosUpdate:
          if (TargetPosUpdate == null) {
            TargetPosUpdate = new global::IUX.TargetPosUpdate();
          }
          TargetPosUpdate.MergeFrom(other.TargetPosUpdate);
          break;
        case MessageTypeOneofCase.Abort:
          if (Abort == null) {
            Abort = new global::IUX.Abort();
          }
          Abort.MergeFrom(other.Abort);
          break;
        case MessageTypeOneofCase.Arm:
          if (Arm == null) {
            Arm = new global::IUX.Arm();
          }
          Arm.MergeFrom(other.Arm);
          break;
        case MessageTypeOneofCase.SteerUpdate:
          if (SteerUpdate == null) {
            SteerUpdate = new global::IUX.SteerUpdate();
          }
          SteerUpdate.MergeFrom(other.SteerUpdate);
          break;
        case MessageTypeOneofCase.RequestCalibration:
          if (RequestCalibration == null) {
            RequestCalibration = new global::IUX.RequestCalibration();
          }
          RequestCalibration.MergeFrom(other.RequestCalibration);
          break;
        case MessageTypeOneofCase.Calibration:
          if (Calibration == null) {
            Calibration = new global::IUX.Calibration();
          }
          Calibration.MergeFrom(other.Calibration);
          break;
        case MessageTypeOneofCase.RequestStatus:
          if (RequestStatus == null) {
            RequestStatus = new global::IUX.RequestStatus();
          }
          RequestStatus.MergeFrom(other.RequestStatus);
          break;
        case MessageTypeOneofCase.Status:
          if (Status == null) {
            Status = new global::IUX.Status();
          }
          Status.MergeFrom(other.Status);
          break;
        case MessageTypeOneofCase.Disarm:
          if (Disarm == null) {
            Disarm = new global::IUX.Disarm();
          }
          Disarm.MergeFrom(other.Disarm);
          break;
        case MessageTypeOneofCase.Reset:
          if (Reset == null) {
            Reset = new global::IUX.Reset();
          }
          Reset.MergeFrom(other.Reset);
          break;
        case MessageTypeOneofCase.RailStatusRequest:
          if (RailStatusRequest == null) {
            RailStatusRequest = new global::IUX.RailStatusRequest();
          }
          RailStatusRequest.MergeFrom(other.RailStatusRequest);
          break;
        case MessageTypeOneofCase.RailStatus:
          if (RailStatus == null) {
            RailStatus = new global::IUX.RailStatus();
          }
          RailStatus.MergeFrom(other.RailStatus);
          break;
        case MessageTypeOneofCase.TurretCueToTarget:
          if (TurretCueToTarget == null) {
            TurretCueToTarget = new global::IUX.TurretCueToTarget();
          }
          TurretCueToTarget.MergeFrom(other.TurretCueToTarget);
          break;
        case MessageTypeOneofCase.TurretCalibrate:
          if (TurretCalibrate == null) {
            TurretCalibrate = new global::IUX.TurretCalibrate();
          }
          TurretCalibrate.MergeFrom(other.TurretCalibrate);
          break;
        case MessageTypeOneofCase.TurretEmergencyStop:
          if (TurretEmergencyStop == null) {
            TurretEmergencyStop = new global::IUX.TurretEmergencyStop();
          }
          TurretEmergencyStop.MergeFrom(other.TurretEmergencyStop);
          break;
        case MessageTypeOneofCase.TurretTrack:
          if (TurretTrack == null) {
            TurretTrack = new global::IUX.TurretTrack();
          }
          TurretTrack.MergeFrom(other.TurretTrack);
          break;
        case MessageTypeOneofCase.TurretStatusRequest:
          if (TurretStatusRequest == null) {
            TurretStatusRequest = new global::IUX.TurretStatusRequest();
          }
          TurretStatusRequest.MergeFrom(other.TurretStatusRequest);
          break;
        case MessageTypeOneofCase.TurretStatus:
          if (TurretStatus == null) {
            TurretStatus = new global::IUX.TurretStatus();
          }
          TurretStatus.MergeFrom(other.TurretStatus);
          break;
        case MessageTypeOneofCase.ReadyToLaunch:
          if (ReadyToLaunch == null) {
            ReadyToLaunch = new global::IUX.ReadyToLaunch();
          }
          ReadyToLaunch.MergeFrom(other.ReadyToLaunch);
          break;
        case MessageTypeOneofCase.ArmRail:
          if (ArmRail == null) {
            ArmRail = new global::IUX.ArmRail();
          }
          ArmRail.MergeFrom(other.ArmRail);
          break;
        case MessageTypeOneofCase.DisarmRail:
          if (DisarmRail == null) {
            DisarmRail = new global::IUX.DisarmRail();
          }
          DisarmRail.MergeFrom(other.DisarmRail);
          break;
        case MessageTypeOneofCase.LaunchRail:
          if (LaunchRail == null) {
            LaunchRail = new global::IUX.LaunchRail();
          }
          LaunchRail.MergeFrom(other.LaunchRail);
          break;
        case MessageTypeOneofCase.MissileLoaded:
          if (MissileLoaded == null) {
            MissileLoaded = new global::IUX.MissileLoaded();
          }
          MissileLoaded.MergeFrom(other.MissileLoaded);
          break;
        case MessageTypeOneofCase.MissileUnloaded:
          if (MissileUnloaded == null) {
            MissileUnloaded = new global::IUX.MissileUnloaded();
          }
          MissileUnloaded.MergeFrom(other.MissileUnloaded);
          break;
        case MessageTypeOneofCase.TurretReset:
          if (TurretReset == null) {
            TurretReset = new global::IUX.TurretReset();
          }
          TurretReset.MergeFrom(other.TurretReset);
          break;
        case MessageTypeOneofCase.BssRequest:
          if (BssRequest == null) {
            BssRequest = new global::IUX.BSSRequest();
          }
          BssRequest.MergeFrom(other.BssRequest);
          break;
        case MessageTypeOneofCase.BssReply:
          if (BssReply == null) {
            BssReply = new global::IUX.BSSReply();
          }
          BssReply.MergeFrom(other.BssReply);
          break;
        case MessageTypeOneofCase.OtsRequestConfig:
          if (OtsRequestConfig == null) {
            OtsRequestConfig = new global::IUX.OTSRequestConfig();
          }
          OtsRequestConfig.MergeFrom(other.OtsRequestConfig);
          break;
        case MessageTypeOneofCase.OtsConfig:
          if (OtsConfig == null) {
            OtsConfig = new global::IUX.OTSConfig();
          }
          OtsConfig.MergeFrom(other.OtsConfig);
          break;
        case MessageTypeOneofCase.OtsControl:
          if (OtsControl == null) {
            OtsControl = new global::IUX.OTSControl();
          }
          OtsControl.MergeFrom(other.OtsControl);
          break;
        case MessageTypeOneofCase.DasSimulationData:
          if (DasSimulationData == null) {
            DasSimulationData = new global::IUX.DASSimulationData();
          }
          DasSimulationData.MergeFrom(other.DasSimulationData);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::IUX.PlainText subBuilder = new global::IUX.PlainText();
            if (messageTypeCase_ == MessageTypeOneofCase.PlainText) {
              subBuilder.MergeFrom(PlainText);
            }
            input.ReadMessage(subBuilder);
            PlainText = subBuilder;
            break;
          }
          case 18: {
            global::IUX.Broadcast subBuilder = new global::IUX.Broadcast();
            if (messageTypeCase_ == MessageTypeOneofCase.Broadcast) {
              subBuilder.MergeFrom(Broadcast);
            }
            input.ReadMessage(subBuilder);
            Broadcast = subBuilder;
            break;
          }
          case 26: {
            global::IUX.BroadcastReply subBuilder = new global::IUX.BroadcastReply();
            if (messageTypeCase_ == MessageTypeOneofCase.BroadcastReply) {
              subBuilder.MergeFrom(BroadcastReply);
            }
            input.ReadMessage(subBuilder);
            BroadcastReply = subBuilder;
            break;
          }
          case 34: {
            global::IUX.Launch subBuilder = new global::IUX.Launch();
            if (messageTypeCase_ == MessageTypeOneofCase.Launch) {
              subBuilder.MergeFrom(Launch);
            }
            input.ReadMessage(subBuilder);
            Launch = subBuilder;
            break;
          }
          case 42: {
            global::IUX.TargetPosUpdate subBuilder = new global::IUX.TargetPosUpdate();
            if (messageTypeCase_ == MessageTypeOneofCase.TargetPosUpdate) {
              subBuilder.MergeFrom(TargetPosUpdate);
            }
            input.ReadMessage(subBuilder);
            TargetPosUpdate = subBuilder;
            break;
          }
          case 50: {
            global::IUX.Abort subBuilder = new global::IUX.Abort();
            if (messageTypeCase_ == MessageTypeOneofCase.Abort) {
              subBuilder.MergeFrom(Abort);
            }
            input.ReadMessage(subBuilder);
            Abort = subBuilder;
            break;
          }
          case 58: {
            global::IUX.Arm subBuilder = new global::IUX.Arm();
            if (messageTypeCase_ == MessageTypeOneofCase.Arm) {
              subBuilder.MergeFrom(Arm);
            }
            input.ReadMessage(subBuilder);
            Arm = subBuilder;
            break;
          }
          case 66: {
            global::IUX.SteerUpdate subBuilder = new global::IUX.SteerUpdate();
            if (messageTypeCase_ == MessageTypeOneofCase.SteerUpdate) {
              subBuilder.MergeFrom(SteerUpdate);
            }
            input.ReadMessage(subBuilder);
            SteerUpdate = subBuilder;
            break;
          }
          case 74: {
            global::IUX.RequestCalibration subBuilder = new global::IUX.RequestCalibration();
            if (messageTypeCase_ == MessageTypeOneofCase.RequestCalibration) {
              subBuilder.MergeFrom(RequestCalibration);
            }
            input.ReadMessage(subBuilder);
            RequestCalibration = subBuilder;
            break;
          }
          case 82: {
            global::IUX.Calibration subBuilder = new global::IUX.Calibration();
            if (messageTypeCase_ == MessageTypeOneofCase.Calibration) {
              subBuilder.MergeFrom(Calibration);
            }
            input.ReadMessage(subBuilder);
            Calibration = subBuilder;
            break;
          }
          case 90: {
            global::IUX.RequestStatus subBuilder = new global::IUX.RequestStatus();
            if (messageTypeCase_ == MessageTypeOneofCase.RequestStatus) {
              subBuilder.MergeFrom(RequestStatus);
            }
            input.ReadMessage(subBuilder);
            RequestStatus = subBuilder;
            break;
          }
          case 98: {
            global::IUX.Status subBuilder = new global::IUX.Status();
            if (messageTypeCase_ == MessageTypeOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
          case 106: {
            global::IUX.Disarm subBuilder = new global::IUX.Disarm();
            if (messageTypeCase_ == MessageTypeOneofCase.Disarm) {
              subBuilder.MergeFrom(Disarm);
            }
            input.ReadMessage(subBuilder);
            Disarm = subBuilder;
            break;
          }
          case 114: {
            global::IUX.Reset subBuilder = new global::IUX.Reset();
            if (messageTypeCase_ == MessageTypeOneofCase.Reset) {
              subBuilder.MergeFrom(Reset);
            }
            input.ReadMessage(subBuilder);
            Reset = subBuilder;
            break;
          }
          case 122: {
            global::IUX.RailStatusRequest subBuilder = new global::IUX.RailStatusRequest();
            if (messageTypeCase_ == MessageTypeOneofCase.RailStatusRequest) {
              subBuilder.MergeFrom(RailStatusRequest);
            }
            input.ReadMessage(subBuilder);
            RailStatusRequest = subBuilder;
            break;
          }
          case 130: {
            global::IUX.RailStatus subBuilder = new global::IUX.RailStatus();
            if (messageTypeCase_ == MessageTypeOneofCase.RailStatus) {
              subBuilder.MergeFrom(RailStatus);
            }
            input.ReadMessage(subBuilder);
            RailStatus = subBuilder;
            break;
          }
          case 138: {
            global::IUX.TurretCueToTarget subBuilder = new global::IUX.TurretCueToTarget();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretCueToTarget) {
              subBuilder.MergeFrom(TurretCueToTarget);
            }
            input.ReadMessage(subBuilder);
            TurretCueToTarget = subBuilder;
            break;
          }
          case 146: {
            global::IUX.TurretCalibrate subBuilder = new global::IUX.TurretCalibrate();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretCalibrate) {
              subBuilder.MergeFrom(TurretCalibrate);
            }
            input.ReadMessage(subBuilder);
            TurretCalibrate = subBuilder;
            break;
          }
          case 154: {
            global::IUX.TurretEmergencyStop subBuilder = new global::IUX.TurretEmergencyStop();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretEmergencyStop) {
              subBuilder.MergeFrom(TurretEmergencyStop);
            }
            input.ReadMessage(subBuilder);
            TurretEmergencyStop = subBuilder;
            break;
          }
          case 162: {
            global::IUX.TurretTrack subBuilder = new global::IUX.TurretTrack();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretTrack) {
              subBuilder.MergeFrom(TurretTrack);
            }
            input.ReadMessage(subBuilder);
            TurretTrack = subBuilder;
            break;
          }
          case 170: {
            global::IUX.TurretStatusRequest subBuilder = new global::IUX.TurretStatusRequest();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretStatusRequest) {
              subBuilder.MergeFrom(TurretStatusRequest);
            }
            input.ReadMessage(subBuilder);
            TurretStatusRequest = subBuilder;
            break;
          }
          case 178: {
            global::IUX.TurretStatus subBuilder = new global::IUX.TurretStatus();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretStatus) {
              subBuilder.MergeFrom(TurretStatus);
            }
            input.ReadMessage(subBuilder);
            TurretStatus = subBuilder;
            break;
          }
          case 186: {
            global::IUX.ReadyToLaunch subBuilder = new global::IUX.ReadyToLaunch();
            if (messageTypeCase_ == MessageTypeOneofCase.ReadyToLaunch) {
              subBuilder.MergeFrom(ReadyToLaunch);
            }
            input.ReadMessage(subBuilder);
            ReadyToLaunch = subBuilder;
            break;
          }
          case 194: {
            global::IUX.ArmRail subBuilder = new global::IUX.ArmRail();
            if (messageTypeCase_ == MessageTypeOneofCase.ArmRail) {
              subBuilder.MergeFrom(ArmRail);
            }
            input.ReadMessage(subBuilder);
            ArmRail = subBuilder;
            break;
          }
          case 202: {
            global::IUX.DisarmRail subBuilder = new global::IUX.DisarmRail();
            if (messageTypeCase_ == MessageTypeOneofCase.DisarmRail) {
              subBuilder.MergeFrom(DisarmRail);
            }
            input.ReadMessage(subBuilder);
            DisarmRail = subBuilder;
            break;
          }
          case 210: {
            global::IUX.LaunchRail subBuilder = new global::IUX.LaunchRail();
            if (messageTypeCase_ == MessageTypeOneofCase.LaunchRail) {
              subBuilder.MergeFrom(LaunchRail);
            }
            input.ReadMessage(subBuilder);
            LaunchRail = subBuilder;
            break;
          }
          case 218: {
            global::IUX.MissileLoaded subBuilder = new global::IUX.MissileLoaded();
            if (messageTypeCase_ == MessageTypeOneofCase.MissileLoaded) {
              subBuilder.MergeFrom(MissileLoaded);
            }
            input.ReadMessage(subBuilder);
            MissileLoaded = subBuilder;
            break;
          }
          case 226: {
            global::IUX.MissileUnloaded subBuilder = new global::IUX.MissileUnloaded();
            if (messageTypeCase_ == MessageTypeOneofCase.MissileUnloaded) {
              subBuilder.MergeFrom(MissileUnloaded);
            }
            input.ReadMessage(subBuilder);
            MissileUnloaded = subBuilder;
            break;
          }
          case 234: {
            global::IUX.TurretReset subBuilder = new global::IUX.TurretReset();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretReset) {
              subBuilder.MergeFrom(TurretReset);
            }
            input.ReadMessage(subBuilder);
            TurretReset = subBuilder;
            break;
          }
          case 242: {
            global::IUX.BSSRequest subBuilder = new global::IUX.BSSRequest();
            if (messageTypeCase_ == MessageTypeOneofCase.BssRequest) {
              subBuilder.MergeFrom(BssRequest);
            }
            input.ReadMessage(subBuilder);
            BssRequest = subBuilder;
            break;
          }
          case 250: {
            global::IUX.BSSReply subBuilder = new global::IUX.BSSReply();
            if (messageTypeCase_ == MessageTypeOneofCase.BssReply) {
              subBuilder.MergeFrom(BssReply);
            }
            input.ReadMessage(subBuilder);
            BssReply = subBuilder;
            break;
          }
          case 258: {
            global::IUX.OTSRequestConfig subBuilder = new global::IUX.OTSRequestConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.OtsRequestConfig) {
              subBuilder.MergeFrom(OtsRequestConfig);
            }
            input.ReadMessage(subBuilder);
            OtsRequestConfig = subBuilder;
            break;
          }
          case 266: {
            global::IUX.OTSConfig subBuilder = new global::IUX.OTSConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.OtsConfig) {
              subBuilder.MergeFrom(OtsConfig);
            }
            input.ReadMessage(subBuilder);
            OtsConfig = subBuilder;
            break;
          }
          case 274: {
            global::IUX.OTSControl subBuilder = new global::IUX.OTSControl();
            if (messageTypeCase_ == MessageTypeOneofCase.OtsControl) {
              subBuilder.MergeFrom(OtsControl);
            }
            input.ReadMessage(subBuilder);
            OtsControl = subBuilder;
            break;
          }
          case 282: {
            global::IUX.DASSimulationData subBuilder = new global::IUX.DASSimulationData();
            if (messageTypeCase_ == MessageTypeOneofCase.DasSimulationData) {
              subBuilder.MergeFrom(DasSimulationData);
            }
            input.ReadMessage(subBuilder);
            DasSimulationData = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::IUX.PlainText subBuilder = new global::IUX.PlainText();
            if (messageTypeCase_ == MessageTypeOneofCase.PlainText) {
              subBuilder.MergeFrom(PlainText);
            }
            input.ReadMessage(subBuilder);
            PlainText = subBuilder;
            break;
          }
          case 18: {
            global::IUX.Broadcast subBuilder = new global::IUX.Broadcast();
            if (messageTypeCase_ == MessageTypeOneofCase.Broadcast) {
              subBuilder.MergeFrom(Broadcast);
            }
            input.ReadMessage(subBuilder);
            Broadcast = subBuilder;
            break;
          }
          case 26: {
            global::IUX.BroadcastReply subBuilder = new global::IUX.BroadcastReply();
            if (messageTypeCase_ == MessageTypeOneofCase.BroadcastReply) {
              subBuilder.MergeFrom(BroadcastReply);
            }
            input.ReadMessage(subBuilder);
            BroadcastReply = subBuilder;
            break;
          }
          case 34: {
            global::IUX.Launch subBuilder = new global::IUX.Launch();
            if (messageTypeCase_ == MessageTypeOneofCase.Launch) {
              subBuilder.MergeFrom(Launch);
            }
            input.ReadMessage(subBuilder);
            Launch = subBuilder;
            break;
          }
          case 42: {
            global::IUX.TargetPosUpdate subBuilder = new global::IUX.TargetPosUpdate();
            if (messageTypeCase_ == MessageTypeOneofCase.TargetPosUpdate) {
              subBuilder.MergeFrom(TargetPosUpdate);
            }
            input.ReadMessage(subBuilder);
            TargetPosUpdate = subBuilder;
            break;
          }
          case 50: {
            global::IUX.Abort subBuilder = new global::IUX.Abort();
            if (messageTypeCase_ == MessageTypeOneofCase.Abort) {
              subBuilder.MergeFrom(Abort);
            }
            input.ReadMessage(subBuilder);
            Abort = subBuilder;
            break;
          }
          case 58: {
            global::IUX.Arm subBuilder = new global::IUX.Arm();
            if (messageTypeCase_ == MessageTypeOneofCase.Arm) {
              subBuilder.MergeFrom(Arm);
            }
            input.ReadMessage(subBuilder);
            Arm = subBuilder;
            break;
          }
          case 66: {
            global::IUX.SteerUpdate subBuilder = new global::IUX.SteerUpdate();
            if (messageTypeCase_ == MessageTypeOneofCase.SteerUpdate) {
              subBuilder.MergeFrom(SteerUpdate);
            }
            input.ReadMessage(subBuilder);
            SteerUpdate = subBuilder;
            break;
          }
          case 74: {
            global::IUX.RequestCalibration subBuilder = new global::IUX.RequestCalibration();
            if (messageTypeCase_ == MessageTypeOneofCase.RequestCalibration) {
              subBuilder.MergeFrom(RequestCalibration);
            }
            input.ReadMessage(subBuilder);
            RequestCalibration = subBuilder;
            break;
          }
          case 82: {
            global::IUX.Calibration subBuilder = new global::IUX.Calibration();
            if (messageTypeCase_ == MessageTypeOneofCase.Calibration) {
              subBuilder.MergeFrom(Calibration);
            }
            input.ReadMessage(subBuilder);
            Calibration = subBuilder;
            break;
          }
          case 90: {
            global::IUX.RequestStatus subBuilder = new global::IUX.RequestStatus();
            if (messageTypeCase_ == MessageTypeOneofCase.RequestStatus) {
              subBuilder.MergeFrom(RequestStatus);
            }
            input.ReadMessage(subBuilder);
            RequestStatus = subBuilder;
            break;
          }
          case 98: {
            global::IUX.Status subBuilder = new global::IUX.Status();
            if (messageTypeCase_ == MessageTypeOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
          case 106: {
            global::IUX.Disarm subBuilder = new global::IUX.Disarm();
            if (messageTypeCase_ == MessageTypeOneofCase.Disarm) {
              subBuilder.MergeFrom(Disarm);
            }
            input.ReadMessage(subBuilder);
            Disarm = subBuilder;
            break;
          }
          case 114: {
            global::IUX.Reset subBuilder = new global::IUX.Reset();
            if (messageTypeCase_ == MessageTypeOneofCase.Reset) {
              subBuilder.MergeFrom(Reset);
            }
            input.ReadMessage(subBuilder);
            Reset = subBuilder;
            break;
          }
          case 122: {
            global::IUX.RailStatusRequest subBuilder = new global::IUX.RailStatusRequest();
            if (messageTypeCase_ == MessageTypeOneofCase.RailStatusRequest) {
              subBuilder.MergeFrom(RailStatusRequest);
            }
            input.ReadMessage(subBuilder);
            RailStatusRequest = subBuilder;
            break;
          }
          case 130: {
            global::IUX.RailStatus subBuilder = new global::IUX.RailStatus();
            if (messageTypeCase_ == MessageTypeOneofCase.RailStatus) {
              subBuilder.MergeFrom(RailStatus);
            }
            input.ReadMessage(subBuilder);
            RailStatus = subBuilder;
            break;
          }
          case 138: {
            global::IUX.TurretCueToTarget subBuilder = new global::IUX.TurretCueToTarget();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretCueToTarget) {
              subBuilder.MergeFrom(TurretCueToTarget);
            }
            input.ReadMessage(subBuilder);
            TurretCueToTarget = subBuilder;
            break;
          }
          case 146: {
            global::IUX.TurretCalibrate subBuilder = new global::IUX.TurretCalibrate();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretCalibrate) {
              subBuilder.MergeFrom(TurretCalibrate);
            }
            input.ReadMessage(subBuilder);
            TurretCalibrate = subBuilder;
            break;
          }
          case 154: {
            global::IUX.TurretEmergencyStop subBuilder = new global::IUX.TurretEmergencyStop();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretEmergencyStop) {
              subBuilder.MergeFrom(TurretEmergencyStop);
            }
            input.ReadMessage(subBuilder);
            TurretEmergencyStop = subBuilder;
            break;
          }
          case 162: {
            global::IUX.TurretTrack subBuilder = new global::IUX.TurretTrack();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretTrack) {
              subBuilder.MergeFrom(TurretTrack);
            }
            input.ReadMessage(subBuilder);
            TurretTrack = subBuilder;
            break;
          }
          case 170: {
            global::IUX.TurretStatusRequest subBuilder = new global::IUX.TurretStatusRequest();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretStatusRequest) {
              subBuilder.MergeFrom(TurretStatusRequest);
            }
            input.ReadMessage(subBuilder);
            TurretStatusRequest = subBuilder;
            break;
          }
          case 178: {
            global::IUX.TurretStatus subBuilder = new global::IUX.TurretStatus();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretStatus) {
              subBuilder.MergeFrom(TurretStatus);
            }
            input.ReadMessage(subBuilder);
            TurretStatus = subBuilder;
            break;
          }
          case 186: {
            global::IUX.ReadyToLaunch subBuilder = new global::IUX.ReadyToLaunch();
            if (messageTypeCase_ == MessageTypeOneofCase.ReadyToLaunch) {
              subBuilder.MergeFrom(ReadyToLaunch);
            }
            input.ReadMessage(subBuilder);
            ReadyToLaunch = subBuilder;
            break;
          }
          case 194: {
            global::IUX.ArmRail subBuilder = new global::IUX.ArmRail();
            if (messageTypeCase_ == MessageTypeOneofCase.ArmRail) {
              subBuilder.MergeFrom(ArmRail);
            }
            input.ReadMessage(subBuilder);
            ArmRail = subBuilder;
            break;
          }
          case 202: {
            global::IUX.DisarmRail subBuilder = new global::IUX.DisarmRail();
            if (messageTypeCase_ == MessageTypeOneofCase.DisarmRail) {
              subBuilder.MergeFrom(DisarmRail);
            }
            input.ReadMessage(subBuilder);
            DisarmRail = subBuilder;
            break;
          }
          case 210: {
            global::IUX.LaunchRail subBuilder = new global::IUX.LaunchRail();
            if (messageTypeCase_ == MessageTypeOneofCase.LaunchRail) {
              subBuilder.MergeFrom(LaunchRail);
            }
            input.ReadMessage(subBuilder);
            LaunchRail = subBuilder;
            break;
          }
          case 218: {
            global::IUX.MissileLoaded subBuilder = new global::IUX.MissileLoaded();
            if (messageTypeCase_ == MessageTypeOneofCase.MissileLoaded) {
              subBuilder.MergeFrom(MissileLoaded);
            }
            input.ReadMessage(subBuilder);
            MissileLoaded = subBuilder;
            break;
          }
          case 226: {
            global::IUX.MissileUnloaded subBuilder = new global::IUX.MissileUnloaded();
            if (messageTypeCase_ == MessageTypeOneofCase.MissileUnloaded) {
              subBuilder.MergeFrom(MissileUnloaded);
            }
            input.ReadMessage(subBuilder);
            MissileUnloaded = subBuilder;
            break;
          }
          case 234: {
            global::IUX.TurretReset subBuilder = new global::IUX.TurretReset();
            if (messageTypeCase_ == MessageTypeOneofCase.TurretReset) {
              subBuilder.MergeFrom(TurretReset);
            }
            input.ReadMessage(subBuilder);
            TurretReset = subBuilder;
            break;
          }
          case 242: {
            global::IUX.BSSRequest subBuilder = new global::IUX.BSSRequest();
            if (messageTypeCase_ == MessageTypeOneofCase.BssRequest) {
              subBuilder.MergeFrom(BssRequest);
            }
            input.ReadMessage(subBuilder);
            BssRequest = subBuilder;
            break;
          }
          case 250: {
            global::IUX.BSSReply subBuilder = new global::IUX.BSSReply();
            if (messageTypeCase_ == MessageTypeOneofCase.BssReply) {
              subBuilder.MergeFrom(BssReply);
            }
            input.ReadMessage(subBuilder);
            BssReply = subBuilder;
            break;
          }
          case 258: {
            global::IUX.OTSRequestConfig subBuilder = new global::IUX.OTSRequestConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.OtsRequestConfig) {
              subBuilder.MergeFrom(OtsRequestConfig);
            }
            input.ReadMessage(subBuilder);
            OtsRequestConfig = subBuilder;
            break;
          }
          case 266: {
            global::IUX.OTSConfig subBuilder = new global::IUX.OTSConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.OtsConfig) {
              subBuilder.MergeFrom(OtsConfig);
            }
            input.ReadMessage(subBuilder);
            OtsConfig = subBuilder;
            break;
          }
          case 274: {
            global::IUX.OTSControl subBuilder = new global::IUX.OTSControl();
            if (messageTypeCase_ == MessageTypeOneofCase.OtsControl) {
              subBuilder.MergeFrom(OtsControl);
            }
            input.ReadMessage(subBuilder);
            OtsControl = subBuilder;
            break;
          }
          case 282: {
            global::IUX.DASSimulationData subBuilder = new global::IUX.DASSimulationData();
            if (messageTypeCase_ == MessageTypeOneofCase.DasSimulationData) {
              subBuilder.MergeFrom(DasSimulationData);
            }
            input.ReadMessage(subBuilder);
            DasSimulationData = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
